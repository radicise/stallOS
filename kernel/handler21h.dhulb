#utilise "int.s" noscan
u8 handler21h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return int21ahHandle$[ax >> 8]@(ax, bx, cx, dx);
}
u8 handle21h00h(u16 ax, u16 bx, u16 cx, u16 dx) {
	int20h();
}
u8 handle21h01h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return in();
}
u8 handle21h02h(u16 ax, u16 bx, u16 cx, u16 dx) {
	fbprint(dx$, 1, console$);
	return 0;
}
u8 handle21h03h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h04h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h05h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h06h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h07h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h08h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h09h(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h0ah(u16 ax, u16 bx, u16 cx, u16 dx) {
	int g = readLine($$STDIN_FILENO$$, $$STDOUT_FILENO$$, (dx + 2) as *u8, dx as *u8 @ to uint);
	if (g < 0) {
		0x0a to u8 -> (dx + 2) as *u8;
		1 to u8 -> ((dx + 1) as *u8);
	}
	else {
		0x0d to u8 -> (dx + g + 2) as *u8;
		(g + 1) to u8 -> ((dx + 1) as *u8);
	}
	return 0;
}
u8 handle21h0bh(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h0ch(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h0dh(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h0eh(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
u8 handle21h0fh(u16 ax, u16 bx, u16 cx, u16 dx) {
	return 0;
}
