imply s32 sanc();
typealias Elf32_Addr u32;
typealias Elf32_Half u16;
typealias Elf32_Off u32;
typealias Elf32_Sword s32;
typealias Elf32_Word u32;
structure Elf32_Ehdr {
	u8 e_ident,
	u8 e_ident_1,
	u8 e_ident_2,
	u8 e_ident_3,
	u8 e_ident_4,
	u8 e_ident_5,
	u8 e_ident_6,
	u8 e_ident_7,
	u8 e_ident_8,
	u8 e_ident_9,
	u8 e_ident_10,
	u8 e_ident_11,
	u8 e_ident_12,
	u8 e_ident_13,
	u8 e_ident_14,
	u8 e_ident_15,
	Elf32_Half e_type,
	Elf32_Half e_machine,
	Elf32_Word e_version,
	Elf32_Addr e_entry,
	Elf32_Off e_phoff,
	Elf32_Off e_shoff,
	Elf32_Word e_flags,
	Elf32_Half e_ehsize,
	Elf32_Half e_phentsize,
	Elf32_Half e_phnum,
	Elf32_Half e_shentsize,
	Elf32_Half e_shnum,
	Elf32_Half e_shstrndx;
}
structure Elf32_Phdr {
	Elf32_Word p_type,
	Elf32_Off p_offset,
	Elf32_Addr p_vaddr,
	Elf32_Addr p_paddr,
	Elf32_Word p_filesz,
	Elf32_Word p_memsz,
	Elf32_Word p_flags,
	Elf32_Word p_align;
}
int cpy(addr dest, addr from, uint count) {
	:cpy_loop1;
	if (count == 0) {
		return 0;
	}
	(from to *u8)@ -> (dest to *u8);
	from = from + 1;
	dest = dest + 1;
	count = count - 1;
	goto cpy_loop1;
}
int fill(addr dest, u8 val, uint count) {
	:fill_loop1;
	if (count == 0) {
		return 0;
	}
	val -> (dest to *u8);
	dest = dest + 1;
	count = count - 1;
	goto fill_loop1;
}
int loadSeg(*Elf32_Phdr seg, addr fileBase, addr base, *addr stack) {/* TODO Fail is base address alignment is insufficient */
	Elf32_Word t = seg.p_type@;
	if ((t == 0) | (t == 4) | (t == 6)) {
		return 0;
	}
	if (t == 2) {
		return 19;/* Dynamic linking is not supported */
	}
	if (t == 3) {
		return 20;/* Program interpretation is not supported */
	}
	if (t == 5) {
		return 21;/* Unsupported segment type */
	}
	if ((t > 0x70000000) & (t <= 0x7fffffff)) {
		return 22;/* Unrecognised processor-specific segment type */
		/* TODO Check for these in the SystemV ABI for i386 */
	}
	if (t > 6) {
		if (t != (0x6474e551 as u32)) {/* Disregard of PT_GNU_STACK because all segments are executable *//* TODO Pay attention to the p_flags value of PT_GNU_STACK when p_flags becomes used, in order to set executability of the stack accordingly */
			return 23;/* Unrecognised segment type */
		}
	}
	/* TODO Use p_flags */
	if ((seg.p_filesz@) > (seg.p_memsz@)) {
		return 24;/* Memory image is of smaller size than file image */
	}
	cpy((base + (seg.p_vaddr@)) to addr, (fileBase + (seg.p_offset@)) to addr, seg.p_filesz@ to uint);
	if ((seg.p_memsz@) > (seg.p_filesz@)) {
		fill((base + (seg.p_vaddr@) + (seg.p_filesz@)) to addr, 0x00 as u8, ((seg.p_memsz@) - (seg.p_filesz@)) to uint);
	}
	addr s = base + (seg.p_vaddr@) + (seg.p_memsz@);
	if (s > (stack@)) {
		s -> stack;
	}
	return 0;
}
int loadELF(*Elf32_Ehdr prgm, addr base, *addr s) {
	if (prgm.e_ident@ != 0x7F) {
		return 1;/* Invalid magic */
	}
	if (prgm.e_ident_1@ != 0x45) {
		return 1;
	}
	if (prgm.e_ident_2@ != 0x4C) {
		return 1;
	}
	if (prgm.e_ident_3@ != 0x46) {
		return 1;
	}
	u8 c = prgm.e_ident_4@;
	if (c == 0) {
		return 2;/* Invalid ELF class */
	}
	if (c == 2) {
		return 3;/* ELF class not supported */
	}
	if (c > 2) {
		return 4;/* ELF class not recognised */
	}
	c = prgm.e_ident_5@;
	if (c == 0) {
		return 5;/* Invalid data encoding */
	}
	if (c == 2) {
		return 6;/* Data encoding not supported */
	}
	if (c > 2) {
		return 7;/* Unrecognised data encoding */
	}
	c = prgm.e_ident_6@;
	if (c != (prgm.e_version@)) {
		return 8;/* Inconsistent ELF version identifier */
	}
	if (c == 0) {
		return 9;/* Invalid ELF version */
	}
	if (c > 1) {
		return 10;/* Unrecognised ELF version identifier */
	}
	int t = prgm.e_type@ to int;
	if (t == 0) {
		return 11;/* No ELF file type */
	}
	if (t == 1) {
		return 12;/* ELF relocatable file */
	}
	if (t == 3) {
		return 13;/* ELF shared object file */
	}
	if (t == 4) {
		return 14;/* ELF core file */
	}
	if (t >= 0xff00) {
		return 15;/* Unrecognised processor-specific ELF file type */
		/* TODO find processor-specific types for SystemV i386 */
	}
	if (t != 2) {
		return 16;/* Unrecognised ELF file type */
	}
	t = prgm.e_machine@;
	if ((t <= 8) & (t != 0) & (t != 3) & (t != 6)) {
		return 17;/* Unsupported architecture */
	}
	if ((t > 8) | (t == 6)) {
		return 18;/* Unrecognised architecture */
	}
	addr*Elf32_Phdr seg = prgm + 52;
	uint ps = prgm.e_phentsize@;
	uint pnum = prgm.e_phnum@;
	int res = 0;
	:loadELF_loop1;
	if (pnum == 0) {
		return 0;
	}
	res = loadSeg(seg, prgm, base, s);
	if (res != 0) {
		return res;
	}
	seg = seg + ps;
	pnum = pnum - 1;
	goto loadELF_loop1;
}
int makeMemseg(a32 base, u8 priv) {/* ERRORS CANNOT BE ISSUED AFTER INCREMENTATION OF THE LGDT STRUCTURE LENGTH PROPERTY */
	uint segB = (0x07fa as addr*u16)@;
	if (segB >= 375) {
		return 25;/* Too many segments */
	}
	if (priv >= 4) {
		return 26;/* Invalid permission level */
	}
	((segB + 16) to u16) -> (0x07fa as addr*u16);
	a32*u16 sd = (((0x07fc as a32*u32)@) + segB + 1) as a32*u16;
	(0xffff as u16) -> (sd[0]);
	(base as u16) -> (sd[1]);
	(((((priv as u32) << 13) | 0x9a00) | (((base >> 16) & 0x00ff) as u32)) as u16) -> (sd[2]);
	((0x00cf | (((base >> 16) & 0xff00) as u32)) as u16) -> (sd[3]);
	(0xffff as u16) -> (sd[4]);
	(base as u16) -> (sd[5]);
	(((((priv as u32) << 13) | 0x9200) | (((base >> 16) & 0x00ff) as u32)) as u16) -> (sd[6]);
	((0x00cf | (((base >> 16) & 0xff00) as u32)) as u16) -> (sd[7]);
	
	/*
	((0x7fa as *u8)@ + 16) as u8 -> (0xb8000 as *u8);
	((0x7fb as *u8)@ + 16) as u8 -> (0xb8002 as *u8);
	((0x7fc as *u8)@ + 16) as u8 -> (0xb8004 as *u8);
	((0x7fd as *u8)@ + 16) as u8 -> (0xb8006 as *u8);
	((0x7fe as *u8)@ + 16) as u8 -> (0xb8008 as *u8);
	((0x7ff as *u8)@ + 16) as u8 -> (0xb800a as *u8);
	:ege;
	goto ege;
	*/



	/&xorl %eax,%eax
movw $0x07fa,%ax
lgdt (%eax)
&/
	return 0;
}
int execELF(addr base, uint entry, *s32 code, addr stackAddr) {
	int i = makeMemseg(base, 0x00);/* TODO Change privilege level *//* ERRORS CANNOT BE ISSUED AFTER CREATION OF THE LGDT ENTRY */
	if (i != 0) {
		return i;
	}
	/*
	((entry + base) as *u8)@ -> (0xb8000 as *u8);
	((entry + base + 1) as *u8)@ -> (0xb8002 as *u8);
	((entry + base + 2) as *u8)@ -> (0xb8004 as *u8);
	((entry + base + 3) as *u8)@ -> (0xb8006 as *u8);
	((entry + base + 4) as *u8)@ -> (0xb8008 as *u8);
	((entry + base + 5) as *u8)@ -> (0xb800a as *u8);
	((entry + base + 6) as *u8)@ -> (0xb800c as *u8);
	((entry + base + 7) as *u8)@ -> (0xb800e as *u8);
	:ege;
	goto ege;
	*/
	entry as u32;
	/&/*pushl %eax
*/

movl %eax,%ebx

xorl %eax,%eax
movw 0x07fa,%ax
subw $0x0f,%ax
pushw %ax

pushl %ebx

pushw %ax
&/



stackAddr;
/&movl %esp,%ebx
incl %ebx
incl %ebx
movl %eax,%ecx
movw %ds,%ax
movw %ax,%es
popw %ax
addw $0x08,%ax
movw %ax,%ds
movw %ax,%ss
movl %ecx,%esp
pushl %ebx
pushl %ebp
xorl %ebp,%ebp
/*
movw $0x18,%ax
movw %ax,%es
movw %es:(%ebx),%ax
movl %es:2(%ebx),%ebx
qwsa:
jmp qwsa
*/
lcall *%es:(%ebx)
popl %ebp
popl %esp
movw %cs,%bx
movw %bx,%ds
movw %bx,%ss
popl %ebx
popw %bx
pushl %eax
&/
	code;
	/&popl %ebx
movl %ebx,(%eax)
&/
	(((0x07fa as addr*u16)@ as u32 - 16) as u16) -> (0x07fa as addr*u16);
	return 0;
}
/&farRunELF:
.globl farRunELF#%eax: elf, %edx: memArea, %ecx: code; %ebx, %esi, %edi: Scratch; Return: %eax
movw %ss,%bx
rorl $16,%ebx
movw %ds,%bx
movl %ebx,%esi
movl %esp,%edi
movw $0x10,%bx
movw %bx,%ds
movw %bx,%ss
movl $0x00010000,%esp
pushl %edi
pushl %esi
pushl %ebp
xorl %ebp,%ebp
pushl %ecx
pushl %edx
pushl %eax
call runELF
popl %ebx
popl %ebx
popl %ebx
popl %ebp
popl %ebx
popl %esp
movw %bx,%ds
roll $16,%ebx
movw %bx,%ss
lret
&/
int runELF(addr elf, addr memArea, *s32 code) {
	addr s = memArea;
	int i = loadELF(elf as *Elf32_Ehdr, memArea, s$);
	if (i != 0) {
		return i;
	}
	s = s + 0x00200000 - memArea;
	s = s - (s % 4);
	i = execELF(memArea, (elf as *Elf32_Ehdr).e_entry@, code, s);
	if (i != 0) {
		return i;
	}
	return 0;
}
